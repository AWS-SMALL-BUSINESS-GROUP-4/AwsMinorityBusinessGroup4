type Business @model 
@auth(rules: [
  { allow: owner },  # Business owner can create, read, update, and delete their own Business
#  { allow: public, provider: apiKey, operations: [read] },  # Public API key access for read-only
  { allow: groups, groups: ["Admin"], operations: [read, update, delete] }  # Admins can manage all businesses
]) 
{
  businessId: ID! @primaryKey
  ownerId: ID! @index(name: "byUser")
  name: String!
  email: AWSEmail!  # Business email
  phoneNumber: AWSPhone!  # Business phone number
  website: AWSURL  # Optional business website
  category: String!
  address: String!  # Full formatted address
  street: String!
  aptSuiteOther: String  # Optional apartment/suite field
  city: String!
  state: String!
  zipcode: String!
  country: String!
  latitude: Float
  longitude: Float
  businessHours: AWSJSON  # Store structured business hours
  description: String!
  photos: [AWSURL]  # Store URLs of uploaded photos
  averageRating: Float
  reviews: [Review] @hasMany(indexName: "byBusiness", fields: ["businessId"])
}


type Review @model 
@auth(rules: [
  { allow: owner },
#  { allow: public, provider: apiKey, operations: [read] },
  { allow: groups, groups: ["Admin"], operations: [read, update, delete] }
]) 
{
  reviewId: ID! @primaryKey
  businessId: ID! @index(name: "byBusiness")
  business: Business @belongsTo(fields: ["businessId"])  # Enables nested queries
  userId: ID! @index(name: "byUser")
  user: User @belongsTo(fields: ["userId"])
  rating: Float! @range(min: 0, max: 5)
  content: String!
  reviewDate: AWSDateTime!
}

type User 
@model 
@auth(rules: [
  { allow: owner },
#  { allow: public, provider: apiKey, operations: [read] },
  { allow: groups, groups: ["Admin"], operations: [read, update, delete] }
]) 
{
  userId: ID! @primaryKey
  name: String!
  email: String
  profilePic: AWSURL!
  joinedAt: AWSDateTime!
  lastLogin: AWSDateTime!
  reviews: [Review] @hasMany(indexName: "byUser", fields: ["userId"])
}

